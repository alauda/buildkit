apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  runTemplate:
    spec:
      workspaces:
        - name: cache
          persistentVolumeClaim:
            claimName: build-cache
          subPath: golang
  workspaces:
    - description: |
        This workspace is shared among all the pipeline tasks to read/write common resources
      name: source
    - description: golang cache
      name: cache
  tasks:
    - name: buildkit-oss-version
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        description: |
          generate oss version
        results:
          - description: oss version
            name: oss-version
        steps:
          - image: build-harbor.alauda.cn/devops/builder-tools:alpine-v3.8.0
            name: read-oss-file
            imagePullPolicy: IfNotPresent
            workingDir: $(workspaces.source.path)
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
            script: |
              echo "generate oss version"
              echo -n "$(cat ./buildkit_version| xargs echo -e)"
              echo -n "$(cat ./buildkit_version| xargs echo -e)" > $(results.oss-version.path)
        workspaces:
          - name: source
            workspace: source
    - name: build-buildkit-image
      runAfter:
        - buildkit-oss-version
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/devops/buildkit
        - name: container-image-tag
          value: $(tasks.buildkit-oss-version.results.oss-version)-alpine-$(build.git.lastCommit.shortID)
        - name: dockerfile
          value: Dockerfile
        - name: labels
          value:
            - branch=$(build.git.branch)
            - commit=$(build.git.lastCommit.id)
        - name: build-extra-args
          value: >-
            --build-arg app_version=$(build.git.version.docker) 
            --build-arg commit_id=$(build.git.lastCommit.id)
            --build-arg GIT_REVISION=$(build.git.lastCommit.id)
            --build-arg GIT_VERSION=$(build.git.version.docker)
            --build-arg RUNC_VERSION=release-1.1
        - name: platform
          value:
            - linux/amd64
            - linux/arm64
        - name: tools-image
          value: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
        - name: verbose
          value: "false"
    - name: image-scan
      runAfter:
        - build-buildkit-image
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: trivy-image-scan
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when: []
      params:
        - name: targets
          value:
            - $(tasks.build-buildkit-image.results.ociContainerImageBuild-url)
        - name: quality-gate
          value: "false"
        - name: scan-flags
          value:
            - vulnerability.ignore-unfixed=true
            - db.skip-update=false
            - db.repository=build-harbor.alauda.cn/ops/aquasecurity/trivy-db
        - name: quality-gate-rules
          value:
            - severity=High
    - name: test-image
      runAfter:
        - build-buildkit-image
      timeout: "1h"
      workspaces:
        - name: source
          workspace: source
      params:
        - name: tools-image
          value: build-harbor.alauda.cn/devops/buildkit:$(tasks.buildkit-oss-version.results.oss-version)-alpine-$(build.git.lastCommit.shortID)
      taskSpec:
        params:
          - name: tools-image
            description: test image reference
        volumes:
          - name: dind-certs
            emptyDir: {}
        sidecars:
          - image: docker-mirrors.alauda.cn/library/docker:20.10-dind
            name: docker-daemon
            args:
              - --storage-driver=overlay2
              - --userland-proxy=false
              - --debug
              - --registry-mirror=https://docker-mirrors.alauda.cn
            securityContext:
              privileged: true
            env:
              - name: DOCKER_TLS_CERTDIR  # 将生成的证书写入与客户端共享的路径
                value: /certs
            resources:
              requests:
                cpu: 1000m
                memory: 2000Mi
              limits:
                cpu: 4000m
                memory: 8000Mi
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
              - mountPath: /workspace/source
                name: $(workspaces.source.volume)
            readinessProbe: # 等待 dind daemon 生成它与客户端共享的证书
              periodSeconds: 1
              exec:
                command: [ 'ls', '/certs/client/ca.pem' ]
        steps:
          - name: test-run
            image: registry.alauda.cn:60080/devops/builder-tools:ubuntu-v3.8.1
            imagePullPolicy: IfNotPresent
            workingDir: $(workspaces.source.path)
            timeout: 2.5h
            resources:
              requests:
                cpu: 1000m
                memory: 2000Mi
              limits:
                cpu: 2000m
                memory: 4000Mi
            env:
              - name: DOCKER_HOST
                value: tcp://localhost:2376
              - name: DOCKER_TLS_VERIFY
                value: "1"
              - name: DOCKER_CERT_PATH
                value: /certs/client
            volumeMounts:
              - mountPath: /certs/client
                name: dind-certs
            script: |
              #!/bin/bash
              set -e
              /katanomi/bin/ktn-settings copy docker --always-match=true ~/.docker/config.json
              cd e2e
              source ./tools.sh
              perpare
              docker run --rm --net=host -v $(pwd):/workspace -v ~/.docker/:/root/.docker/ --privileged --entrypoint /workspace/test.sh $(params.tools-image)
        workspaces:
          - name: source
            workspace: source
